# -*- coding: utf-8 -*-
"""tejas.cs.expt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c3eNtJl3SO8vVAiIW4Wy664bStQqoU8i
"""

#25-07-2023

print('hello world')

import numpy as np

def ancova(x, y, covariate):
    # Convert input data to numpy arrays
    x = np.array(x)
    y = np.array(y)
    covariate = np.array(covariate)

    # Calculate means
    mean_x = np.mean(x)
    mean_y = np.mean(y)
    mean_covariate = np.mean(covariate)

    # Calculate sum of squares
    ss_total = np.sum((y - mean_y) ** 2)
    ss_reg = np.sum((x - mean_x) * (y - mean_y))
    ss_covariate = np.sum((covariate - mean_covariate) ** 2)

    # Calculate regression coefficients
    beta_x = ss_reg / np.sum((x - mean_x) ** 2)
    beta_covariate = np.sum((covariate - mean_covariate) * (y - mean_y)) / ss_covariate

    # Calculate residuals
    residuals = y - (mean_y + beta_x * (x - mean_x) + beta_covariate * (covariate - mean_covariate))

    # Calculate sum of squared residuals
    ss_residual = np.sum(residuals ** 2)

    # Calculate degrees of freedom
    df_reg = 2  # Two predictors: x and covariate
    df_residual = len(x) - df_reg - 1

    # Calculate mean squares
    ms_reg = ss_reg / df_reg
    ms_residual = ss_residual / df_residual

    # Calculate F-statistic
    f_statistic = ms_reg / ms_residual

    # Print results
    print(f"F-statistic: {f_statistic}")
    print(f"p-value: {1 - f_statistic}")

# Example usage
x_data = [1, 2, 3, 4, 5]
y_data = [3, 6, 8, 10, 13]
covariate_data = [1, 2, 3, 4, 5]

ancova(x_data, y_data, covariate_data)

print("this is pyth""on programming")

print("bhavya's phone")

10+15

#arithematic_operators
a=10
b=20
print(a+b)
print(a-b)
print(a*b)
print(9/5)
print(9//5)
print(9%5)
print(2**3)

#comparision_operators
a=10
b=20
print(a<b)
print(a>b)
print(a<=b)
print(a>=b)
print(a==b)

#bitwise operators
print(1&0)  #and
print(1|0)  #or
print(~0)  #not
print(1^0) #bitwise XOR

#logical operators
print(1 and 0)
print(1 or 0)
print(not 1)

print(4==4 and 3<0 or 1==2)

a=10
b=15
print(a+b)

print("hello"+" world")

print(5*"hello")

print("green"*10)

#01-08-2023
#lists
l1=[1,3,2,5,6,9]
l1.sort()
print(l1)

l2=["a","z","g"]
l2.sort()
print(l2)

l3=["a","A"]
l3.sort()
print(l3)

l3=["a","A","z","X"]
l3.reverse()
print(l3)

l3=["a","A"]
l3.sort(reverse=True)
print(l3)

l1=["a","A","z","X"]
l2=["a","A"]
l1=l2
print(l1)

l2=["a","A","z","X"]
l1=["a","A"]
l1=l2
print(l1)

l2=["a","A","z","X"]
l1=["a","A"]
l1+=l2
print(l1)

l2=["a","A","z","X"]
l1=["a","A"]
l3=l1+l2
print(l3)

#tuple
t1=(1,2,3,4,5)
n=len(t1)
print(n)

t1=(1,2,3,4,5)
t2=t1
print(t2)

t1=(1,2,3,4,5)
t2=t1+t1
print(t2)

#dictionary
d1={1:"tejas",2:"python"}
print(d1[1])

d1={1:"tejas",2:"python"}
print(len(d1))

d1={"1":"tejas","2":"python"}
print(d1["2"])

d1={"1":"tejas","2":"python"}
print(len(d1["2"]))

d1={"1":"tejas","2":"python"}
print(d1)

d1={"1":"tejas","2":"python"}
x=d1.get("1")
print(x)

d1={"1":"tejas","2":"python"}
d1["3"]="coding"
print(d1)

d1={"1":"tejas","2":"python"}
d1["2"]="coding"
print(d1)

d1={"1":"tejas","2":"python"}
print(d1.keys())

d1={"1":"tejas","2":"python"}
print(d1.values())

d1={"1":"tejas","2":"python"}
print(d1.items())

d1={"1":"tejas","2":"python"}
d1.update({"2":"javaScript"})
print(d1)
d1={"1":"tejas","2":"python"}
d1["3"]="coding"
print(d1)

d1={'1': 'tejas', '2': 'python', '3': 'coding'}
d1.pop("3")
print(d1)

d1={'1': 'tejas', '2': 'python', '3': 'coding'}
del d1["2"]
print(d1)

#sets              08-08-2023
s1={1,2,3,4,5}
print(len(s1))

s1={1,"a","b",4,5}
s1.add("c")
s1.add("c")
print(s1)

s1={1,"a","b",4,5}
s2={7, 'c', 'd', 'e'}
s1.update(s2)
print(s1)
print(s1)

l1=[1,2,3,4,5]
s1={1,"a","b",4,5}
s1.update(l1)
print(s1)

t1=(9,7,6,8,5)
s1={1,"a","b",4,5}
s1.update(t1)
print(s1)

d1={'1': 'tejas', '2': 'python', '3': 'coding'}
s1={1,"a","b",4,5}
s1.update(d1)
print(s1)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s1.remove(5)
print(s1)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s1.remove(3)                         #error
print(s1)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s1.discard(2)                       #no error
print(s1)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s1.pop()
print(s1)

#del keyword
s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
del s1
print(s1)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s2={'t','e','j','a','s'}
s3=s1.union(s2)
print(s3)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s2={'t','e','j','a','s'}
s1.update(s2)
print(s1)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s2={'t','e','j','a','s'}
s3=s1.intersection(s2)
print(s3)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s2={'t','e','j','a','s'}
s1.intersection_update(s2)
print(s1)

s1={1, 4, 5, '1', '2', 'b', '3'}
s2={'t','e','j','a','s'}
s1.intersection_update(s2)
print(s1)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s2={'t','e','j','a','s'}
s3=s1.symmetric_difference(s2)
print(s3)

s1={1, 4, 5, '1', '2', 'b', 'a', '3'}
s2={'t','e','j','a','s'}
s1.symmetric_difference_update(s2)
print(s1)



print("Tejas' Python Code! :D")

#=======================================22-08-2023===============================================
#conditional statements

a=False
if(a):
    print("tejas")
else:
    print("!tejas")

marks=int(input("enter the marks: "))
if (marks>90):
    print("grade= A")
elif(marks>60 & marks<90):
    print("grade= B")
elif(marks>30):
    print("grade= C")
else:
    print("better luck next time...")

l=[]
for i in range(0,4):
    b=int(input("enter number: "))
    l.append(b)
if(l[0]>l[1]):
    if(l[0]>l[2]):
        if(l[0]>l[3]):
            g=l[0]
            print("greatest= ",g)
if(l[1]>l[0]):
    if(l[1]>l[2]):
        if(l[1]>l[3]):
            g=l[1]
            print("greatest= ",g)
if(l[2]>l[0]):
    if(l[2]>l[1]):
        if(l[2]>l[3]):
            g=l[2]
            print("greatest= ",g)
if(l[3]>l[1]):
    if(l[3]>l[2]):
        if(l[3]>l[3]):
            g=l[3]
            print("greatest= ",g)
else:
    print("all numbers are equal")
print(l)

#fibonacci series
n=int(input("FIBONACCI SERIES\nHow mant elements?"))
a=0
b=1
print(a,"\t",b,end="")
for i in range(0,n-2):
    c=a+b
    print("\t",c,end="")
    a=b
    b=c

n=int(input("Enter the height: "))
n=n+1
for i in range(n):
    if(i<n//2):
        for j in range((n-i)//2):
            print("     ", end="")
        for k in range(i):
            print("*    ",end="")
        print()
    else:
        for j in range((i)//2):
            print("     ", end="")
        for k in range(n-i):
            print("*    ",end="")
        print()

for i in range(6):
        for j in range(i):
            print("* ",end="")
        print()

#FACTORIAL
def fac(n):
    if n==0:
        return 1
    else:
        return n*fac(n-1)
n=int(input("Ã«nter the number: "))
print(n,"!= ",fac(n))

#====================================29-08-2023===================================
#default constructor
class student:
    x="welcome to the class"
    def display(self):
        print(self.x)
s1=student()
s1.display()

#parameterized constructor
class Factorial:
    def __init__(self,num):
        fact=1
        self.num=num
        for i in range(1,self.num+1):
            fact=fact*i
        print(fact)
obj=Factorial(5)

#non-parameterized constructor
class display:
    def __init__(self):
        print("non-parameterized constructor")
obj=display()

#===================================12-09-2023============================
#=============file handling===============================================
import os
def create_file(filename):
    try:
        with open(filename, 'w') as f:
            f.write('Hello, world!\n')
        print("File " + filename + " created successfully.")
    except IOError:
        print("Error: could not create file " + filename)

def read_file(filename):
    try:
        with open(filename, 'r') as f:
            contents = f.read()
            print(contents)
    except IOError:
        print("Error: could not read file " + filename)

def append_file(filename, text):
    try:
        with open(filename, 'a') as f:
            f.write(text)
        print("Text appended to file " + filename + " successfully.")
    except IOError:
        print("Error: could not append to file " + filename)

def rename_file(filename, new_filename):
    try:
        os.rename(filename, new_filename)
        print("File " + filename + " renamed to " + new_filename + " successfully.")
    except IOError:
        print("Error: could not rename file " + filename)

def delete_file(filename):
    try:
        os.remove(filename)
        print("File " + filename + " deleted successfully.")
    except IOError:
        print("Error: could not delete file " + filename)
################################################################################
a="y"
print(44*"=")
print("\tFILE HANDLING APPLICATION")
while(a=="y"):
    print(20*"="+"MENU"+20*"="+'''\n\n1. Create File\t\t2
    . Append File\n3. Read File\t\t4. Rename File\n5. Delete File\t\t6. Exit''')
    n=int(input("\nEnter your choice: "))
    if n==1:
        filename=input("Enter the file name: ")
        create_file(filename)
    if n==2:
        filename=input("Enter the file name: ")
        text=input("Enter the text: ")
        append_file(filename,text)
    if n==3:
        filename=input("Enter the file name: ")
        read_file(filename)
    if n==4:
        filename=input("Enter the file name: ")
        new_filename=input("Enter the new file name: ")
        rename_file(filename, new_filename)
    if n==5:
        filename=input("Enter the file name: ")

        delete_file(filename)
    if n==6:
        print("Thankyou!  :)")
        break

import pandas as pd
series1=pd.Series([1,2,3,4])
print(series1)

import pandas as pd
series2=pd.Series([1,2,3,4], index=['A','B','C','D'])
print(series2)

import pandas as pd
series2=pd.Series([1,2,3,4], index=['A','B','C','D'])
print(series2['A':'C'])

import pandas as pd
series1=pd.Series([1,2,3,4])
print(series1[0:2])

import numpy as np
array=np.arange(3)
print(array)

import numpy as np
array=np.arange(3)
print(array.ndim)

import numpy as np
array=np.arange(3)
print(array.shape)

import numpy as np
array=np.arange(3)
print(array.size)

import numpy as np
array1=np.array([[1,2,3,4],[5,6,7,8]])
print(array1)

print(array1.ndim)
print(array1.shape)

print(array1.size)

import numpy as np
array3=np.zeros((4,3))
print(array3)

print("Tejas' Python Code")

import pandas as pd
def write_csv(filename):
    data = {'Name': ['Tejas', 'Ojas', 'Bhavya', 'Dev'],
            'Age': [25, 30, 22, 35],
            'City': ['Delhi', 'Pune', 'Mumbai', 'Noida']}

    df = pd.DataFrame(data)
    df.to_csv(filename, index=False)
    print(f'Data written to {filename}')
def read_csv(filename):
    df = pd.read_csv(filename)
    print('\nDataFrame:')
    print(df)
    print('\nRow-wise slicing (first two rows):')
    print(df.head(2))
    print('\nColumn-wise slicing (Name column):')
    print(df['Name'])
if __name__ == "__main__":
    csv_filename = 'example.csv'
    write_csv(csv_filename)
    read_csv(csv_filename)

import numpy as np
arr_1d = np.array([1, 2, 3, 4, 5])
arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print("1D Array:")
print(arr_1d)
print("\n2D Array:")
print(arr_2d)
print("\nNumPy Functions:")
print("Shape of 2D array:", arr_2d.shape)
print("Size of 1D array:", arr_1d.size)
arr_reshaped = arr_1d.reshape(5, 1)
print("Reshaped 1D array to 2D array:")
print(arr_reshaped)
arr_transposed = np.transpose(arr_2d)
print("\nTransposed 2D array:")
print(arr_transposed)
row_sum = np.sum(arr_2d, axis=1)
print("\nSum of elements along each row:")
print(row_sum)
print("\nSlicing on 1D array:")
print("First three elements:", arr_1d[:3])
print("Elements from index 1 to 4:", arr_1d[1:5])
print("Every alternate element:", arr_1d[::2])
print("\nSlicing on 2D array:")
print("First row:", arr_2d[0, :])
print("First column:", arr_2d[:, 0])
print("Subarray (rows 1 to 2, columns 1 to 2):")
print(arr_2d[1:3, 0:2])

import pandas as pd
import numpy as np
data = {
    'Name': ['Tejas', 'Ojas', 'Bhavya', 'Dev', 'Shambhavi', 'Muskan'],
    'Age': [18, 18, np.nan, 19, 19, 24],
    'City': ['New Delhi', 'Pune', 'Mumbai', 'Noida', 'New Delhi', 'Noida'],
    'Salary': [50000, 60000, 55000, 'Not Available', 62000, 50000]
}
df = pd.DataFrame(data)
print("Original Dataset:")
print(df)
df['Age'].fillna(df['Age'].mean(), inplace=True)
df.dropna(subset=['Salary'], inplace=True)
df['Salary'] = pd.to_numeric(df['Salary'], errors='coerce')
df = df.drop_duplicates()
print("\nCleaned Dataset:")
print(df)
print("\nData Aggregation:")
print("Mean age:", df['Age'].mean())
print("Total salary:", df['Salary'].sum())
grouped_data = df.groupby('City').agg({'Age': 'mean', 'Salary': 'sum'}).reset_index()
print("\nGrouped Data:")
print(grouped_data)

import matplotlib.pyplot as plt
import numpy as np
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)
categories = ['A', 'B', 'C', 'D']
values = [4, 7, 1, 5]
scatter_x = np.random.rand(30)
scatter_y = np.random.rand(30)

plt.figure(figsize=(10, 5))
plt.plot(x, y1, label='sin(x)')
plt.plot(x, y2, label='cos(x)')
plt.title('Line Plot')
plt.xlabel('x-axis')
plt.ylabel('y-axis')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 5))
plt.bar(categories, values, color='skyblue')
plt.title('Bar Graph')
plt.xlabel('Categories')
plt.ylabel('Values')
plt.show()

plt.figure(figsize=(8, 5))
plt.scatter(scatter_x, scatter_y, color='orange', marker='o', label='Random Data')
plt.title('Scatter Plot')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.show()